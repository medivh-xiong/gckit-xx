//
//  <%= fileName %>
//  <%= project %>
//
//  Created by <%= organization %> on <%= createtime %>.
//  Copyright © 2022 <%= organization %>. All rights reserved.
//  控制器

#import "<%= className %>.h"
#import "MJRefresh.h"
#import "<%= cellName %>.h"

@interface <%= className %> () <UITableViewDelegate, UITableViewDataSource>

@property (nonatomic, strong) UITableView *tableView;

@property (nonatomic, assign) NSInteger page;

@end

@implementation <%= className %>

#pragma mark - Life Cycle

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self configViews];
    [self configData];
    [self configNotification];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];

}


#pragma mark - Setup View / Data

- (void)configViews
{
    self.title = @"XXXXX";

    [self.view addSubview:self.tableView];
    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.bottom.right.equalTo(self.view);
        make.top.equalTo(self.view).offset();
    }];

     self.tableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0);

    if (@available(iOS 11.0, *)) {
        self.tableView.estimatedRowHeight = 100;
        self.tableView.estimatedSectionFooterHeight = 0;
        self.tableView.estimatedSectionHeaderHeight = 0;
        self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
    }

    [self.tableView registerClass:[UITableViewCell class] forCellReuseIdentifier:NSStringFromClass([UITableViewCell class])];
    [self.tableView registerClass:[<%= cellName %> class] forCellReuseIdentifier:NSStringFromClass([<%= cellName %> class])];

    self.tableView.mj_header = [MJRefreshNormalHeader headerWithRefreshingTarget:self refreshingAction:@selector(refreshData)];
    self.tableView.mj_footer = [MJRefreshBackNormalFooter footerWithRefreshingTarget:self refreshingAction:@selector(loadMoreData)];
}

- (void)configData
{
    [self refreshData];
}

- (void)configNotification
{
    // @weakify(self);
}


#pragma mark - Observer

#pragma mark - Notification

#pragma mark - Event Response

#pragma mark - Override Methods


#pragma mark - UITableView DataSource

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.dataArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    id model = [self.dataArray safe_objectAtIndex:(NSUInteger) indexPath.row];
    <%= cellName %> *cell = [tableView dequeueReusableCellWithIdentifier:NSStringFromClass([<%= cellName %> class]) forIndexPath:indexPath];
    if (indexPath.row % 2 == 0) {
        cell.contentView.backgroundColor = [UIColor blueColor];
     } else {
        cell.contentView.backgroundColor = [UIColor redColor];
    }
    [cell updateViewByDataModel:model];
    return cell;
}


#pragma mark - UITableView Delegate

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return UITableViewAutomaticDimension;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    id model = [self.dataArray safe_objectAtIndex:(NSUInteger) indexPath.row];
}

        
#pragma mark - Public Methods


#pragma mark - Private Methods

- (void)refreshData
{
    self.page = 1;
    [self.tableView.mj_footer resetNoMoreData];
    [self fetchDataList:NO];
}

- (void)loadMoreData
{
    [self fetchDataList:YES];
}


#pragma mark - Network

- (void)fetchDataList:(BOOL)loadMore
{
    // 未登录/其他异常情况
    if (JY_IsStringEmpty(JY_USER_TOKEN) || nil == JYUserModelGet().currentStudent) {
        [self.tableView.mj_footer endRefreshing];
        [self.tableView.mj_header endRefreshing];
        self.dataArray = @[];
        [self.tableView reloadData];
        return;
    }
    
    [JYHTTPClient GET:ProfessorPage parameters:@{@"pageNo":[NSString stringWithFormat:@"%ld",self.page],@"pageSize":@"10"} success:^(id responseObject) {
        [JYNewCustomHud hideLoadingHud:self.view];
        if ([responseObject[@"code"] intValue] == successCode) {
            self.page += 1;
            NSMutableArray<ExpertsModel *> *array = [ExpertsModel mj_objectArrayWithKeyValuesArray:responseObject[@"data"][@"records"]];
            if (!loadMore) {
                self.dataArray = array.copy;
            }else {
                NSMutableArray *tempArray = self.dataArray.mutableCopy;
                [tempArray addObjectsFromArray:array];
                self.dataArray = tempArray.copy;
            }
            if (array.count < 10) { [self.tableView.mj_footer endRefreshingWithNoMoreData]; }
        }else {
            NSString *msg = JY_EncodeStringFromDic(responseObject, @"message");
            if (!JY_IsStringEmpty(msg)) {
                [self.view makeToast:msg];
            }
        }
        self.firstLoading = FALSE;
        if (loadMore) {
            [self.tableView.mj_footer endRefreshing];
        }else {
            [self.tableView.mj_header endRefreshing];
        }
        [self.tableView reloadData];
    } failure:^(NSError *error) {
        [JYNewCustomHud hideLoadingHud:self.view];
        self.firstLoading = FALSE;
        if (loadMore) {
            [self.tableView.mj_footer endRefreshing];
        }else {
            [self.tableView.mj_header endRefreshing];
        }
        if (JY_IsArrEmpty(self.dataArray)) {
            [self.tableView reloadData];
        }
    }];
}


#pragma mark - Lazy

- (NSArray *)dataArray
{
    if (!_dataArray) {
        _dataArray = [[NSArray alloc] init];
    }
    return _dataArray;
}
    
- (UITableView *)tableView
{
    if (!_tableView) {
        _tableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];
        _tableView.delegate = self;
        _tableView.dataSource = self;
        _tableView.backgroundColor = [UIColor whiteColor];
        _tableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        _tableView.showsVerticalScrollIndicator = FALSE;
    }
    return _tableView;
}

@end
